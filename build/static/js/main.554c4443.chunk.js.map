{"version":3,"sources":["components/Filter.js","components/PersonForm.js","services/persons.js","components/Person.js","components/Persons.js","components/Message.js","App.js","index.js"],"names":["Filter","inputName","handleInputNameChange","value","onChange","PersonForm","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Person","name","number","persons","setPersons","onClick","window","confirm","personService","filter","person","Persons","personsToShow","map","key","Message","message","errorState","className","App","useState","setNewName","setNewNumber","setInputName","showAll","setShowAll","setMessage","setErrorState","useEffect","initialPersons","toLowerCase","includes","event","target","preventDefault","alert","some","duplicatePerson","find","duplicatePersonID","changedPerson","setTimeout","catch","error","console","log","nameObject","length","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.554c4443.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ inputName, handleInputNameChange }) => {\r\n  return (\r\n    <div>\r\n      filter shown with <input value={inputName} onChange={handleInputNameChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({addName, newName, handleNameChange, newNumber, handleNumberChange}) => {\r\n  return (\r\n    <form onSubmit={addName}>\r\n      <div>\r\n        name: <input value={newName} onChange={handleNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input value={newNumber} onChange={handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"https://still-temple-41173.herokuapp.com/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// const update = (id, newObject) => {\r\n//   const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n//   return request.then((response) => response.data);\r\n// };\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst updateNumber = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, remove, updateNumber };\r\n","import React from \"react\";\r\nimport personService from \"../services/persons\";\r\n\r\nconst Person = ({ name, number, id, persons, setPersons }) => {\r\n  const deletePerson = () => {\r\n    if (window.confirm(\"Are you sure you want to delete this person?\")) {\r\n      personService\r\n        .remove(id)\r\n        .then(setPersons(persons.filter((person) => person.id !== id)));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {name} {number}\r\n      <button onClick={deletePerson}> delete </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React from \"react\";\r\nimport Person from \"./Person\";\r\n\r\nconst Persons = ({ personsToShow, persons, setPersons }) => {\r\n  return personsToShow.map((person) => {\r\n    return (\r\n      <Person\r\n        name={person.name}\r\n        number={person.number}\r\n        id={person.id}\r\n        key={person.id}\r\n        persons={persons}\r\n        setPersons={setPersons}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default Persons;\r\n","import React from 'react';\r\n\r\nconst Message = ({ message, errorState }) => {\r\n    if (message === null) {\r\n      return null\r\n    } else if (errorState === true){ // Return messages with different class names based on error state to alter css\r\n      return (\r\n        <div className=\"errorMessage\">\r\n          {message}\r\n        </div>\r\n      )\r\n    } else if (errorState === false){\r\n      return (\r\n        <div className=\"successMessage\">\r\n          {message}\r\n        </div>\r\n      )\r\n    }\r\n  \r\n    \r\n  }\r\n\r\n  export default Message;","import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport personService from \"./services/persons\";\nimport Message from \"./components/Message\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [inputName, setInputName] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [message, setMessage] = useState(\"\");\n  const [errorState, setErrorState] = useState(false);\n\n  // Note: useEffect() by default only runs AFTER first rendering\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  var addName = (event) => {\n    event.preventDefault(); // Prevent default behavior of adding new name\n    if (newName === \"\" || newNumber === \"\") {\n      alert(\"Fields cannot be empty\"); // Prevent user from submitting if any one field is empty\n    } else {\n      // Use some function to search if person's name exists and new input number is different from the records\n      if (persons.some(person => person.name === newName && person.number !== newNumber)) {\n        if (\n          window.confirm( // Prompt user to confirm replacement\n            `${newName} is already added to phonebook, replace old number with a new one?`\n          )\n        ) { // If user confirms...\n          const duplicatePerson = persons.find( // Find the specific duplicated person's object\n            person => person.name === newName\n          );\n          const duplicatePersonID = persons.find( // Get the ID of the person\n            person => person.name === newName\n          ).id;\n          // Create copy of the object of the person to be changed, but update the number\n          const changedPerson = { ...duplicatePerson, number: newNumber }; \n\n          personService\n            .updateNumber(duplicatePersonID, changedPerson) // Call updateNumber from personService, which returns a promise\n            .then(changedPerson => { // Upon successfully resolving promise\n              setPersons( // Use map to look through persons and replace person object with the new person object with updated number\n                persons.map(person =>\n                  person.name === newName ? changedPerson : person \n                )\n              );\n              setErrorState(false) // Set error state to false as promise was successfully resolved\n              // This will affect css of message in the Message component\n              setMessage(`${newName}'s number has been updated`); // Set appropriate message\n              setTimeout(() => { // Set timeout of message for 5 seconds\n                setMessage(null);\n              }, 5000);\n            })\n            .catch(error => { // else if there is an error \n              console.log(error) // console log the error\n              setErrorState(true) // Set error state to true\n              setMessage(`Information of ${newName} has already been removed from the server.`) // Set appropriate message\n              setTimeout(()=>{ // Set timeout for message\n                setMessage(null)\n              }, 5000)\n            });\n        }\n        // Use some function again to check whether there is a record with the exact same name and number as newName and newNumber\n      } else if (persons.some(person => person.name === newName && person.number === newNumber)) {\n        // Show an alert in this case\n        alert(`${newName} has already been added with the number ${newNumber}`)\n      } else { // Else, if person if completely new \n        const nameObject = { // Create new object for the person\n          name: newName,\n          number: newNumber,\n          id: persons.length + 1,\n        };\n        personService\n          .create(nameObject) // Call personService.create()\n          .then(nameObject => {\n            setPersons(persons.concat(nameObject)); // Set new persons data\n            setNewName(\"\"); // Set input field values to blank\n            setNewNumber(\"\");\n            setMessage(`Added ${newName}`); // Set appropriate message\n            setTimeout(() => { // Set timeout for message\n              setMessage(null);\n            }, 5000);\n        });\n      }\n    }\n  };\n\n  // Function to set new input name\n  var handleNameChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  // Function to set new input number\n  var handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n  \n  var handleInputNameChange = (event) => {\n    setInputName(event.target.value);\n    if (event.target.value === \"\") {\n      // If input is blank, show all persons\n      setShowAll(true);\n    } else {\n      // else if there is any input, show only filtered results\n      setShowAll(false);\n    }\n  };\n\n  const personsToShow = showAll\n    ? persons // If showAll is true, show all persons\n    : persons.filter((person) =>\n        person.name.toLowerCase().includes(inputName.toLowerCase())\n      ); // else, filter only searched results\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message message={message} errorState={errorState}/>\n      <Filter\n        inputName={inputName}\n        handleInputNameChange={handleInputNameChange}\n      />\n      <h2> add a new </h2>\n      <PersonForm\n        addName={addName}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        personsToShow={personsToShow}\n        persons={persons}\n        setPersons={setPersons}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}